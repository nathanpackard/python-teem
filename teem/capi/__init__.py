##############################################################################
# capi: c-like api for teem
##############################################################################
# 
# Part of the python bindings for teem, by Carlos Scheidegger
#
# teem is developed by Gordon Kindlmann, and available at
# http://teem.sourceforge.net
#
# This is GPLv2, see /LICENSE
#

from teembase import *
import ctypes

##############################################################################

libteem = ctypes.CDLL('libteem.so')

##############################################################################
# moved these up so that the translated define doesn't choke

airMyEndian = ctypes.c_int.in_dll(libteem, 'airMyEndian')
airMyQNaNHiBit = ctypes.c_int.in_dll(libteem, 'airMyQNaNHiBit')
airMyDio = ctypes.POINTER(ctypes.c_char).in_dll(libteem, 'airMyDio')
airMy32Bit = ctypes.c_int.in_dll(libteem, 'airMy32Bit')

##############################################################################
# This is completely automatically generated by
# grep -h '^#define' *.h | grep -v '\\' | grep -v 'HAS_BEEN_INCLUDED' | grep -v '##'
# The problem is that gccxml works on preprocessed source, so we lose all
# the handy defines

TEEM_VERSION_MAJOR =       1   
TEEM_VERSION_MINOR =      10   
TEEM_VERSION_PATCH =      00   
TEEM_VERSION =         11000   
TEEM_VERSION_STRING = "1.10.0" 
AIR_PI = 3.14159265358979323846
AIR_E =  2.71828182845904523536
AIR_STRLEN_SMALL = (128+1)
AIR_STRLEN_MED =   (256+1)
AIR_STRLEN_LARGE = (512+1)
AIR_STRLEN_HUGE =  (1024+1)
AIR_RANDMT_N = 624
AIR_TYPE_MAX =   10
AIR_INSANE_MAX =        12
AIR_NODIO_MAX =  12
AIR_TRUE = 1
AIR_FALSE = 0
AIR_ENDIAN = (airMyEndian)
AIR_QNANHIBIT = (airMyQNaNHiBit)
AIR_DIO = (airMyDio)
AIR_32BIT = (airMy32Bit)
#AIR_NAN =  (airFloatQNaN.f)
#AIR_QNAN = (airFloatQNaN.f)
#AIR_SNAN = (airFloatSNaN.f)
#AIR_POS_INF = (airFloatPosInf.f)
#AIR_NEG_INF = (airFloatNegInf.f)
#BANE = baneBiffKey
#BANE_PARM_NUM = 5
BIFF_STRLEN = (256+1) 
BIFF_MAXKEYLEN = 128
#DYE = dyeBiffKey
#DYE_MAX_SPACE = 6
#ECHO = echoBiffKey
#ECHO_POS_FLOAT = 1
#ECHO_POS_FLOAT = 0
#echoCol_nt = nrrdTypeFloat
#ECHO_LIST_OBJECT_INCR = 32
#ECHO_IMG_CHANNELS = 5
#ECHO_EPSILON = 0.00005      
#ECHO_NEAR0 = 0.004          
#ECHO_LEN_SMALL_ENOUGH = 5   
#ECHO_THREAD_MAX = 512       
#ECHO_JITTER_NUM =    4
#ECHO_JITTABLE_NUM =    7
#ECHO_MATTER_MAX =    4
#ECHO_MATTER_PARM_NUM = 4
#ECHO_TYPE_NUM =        12
#ELL = ell_biff_key
#ELL_EPS = 1.0e-10
#ELL_CUBIC_ROOT_MAX =           4
GAGE = gageBiffKey
GAGE_PERVOLUME_MAXNUM = 128
GAGE_CTX_FLAG_MAX =    6
GAGE_PVL_FLAG_MAX =    3
GAGE_KERNEL_MAX =     7
GAGE_ITEM_PREREQ_MAXNUM = 8
GAGE_SCL_ITEM_MAX =  32
GAGE_VEC_ITEM_MAX =     29
GAGE_QUERY_BYTES_NUM = 24
GAGE_ITEM_MAX = ((8*GAGE_QUERY_BYTES_NUM)-1)
HOOVER = hooverBiffKey
HOOVER_THREAD_MAX = 512
HOOVER_ERR_MAX =        10
LIMN = limnBiffKey
LIMN_LIGHT_NUM = 8
LIMN_SPLINE_Q_AVG_EPS = 0.00001
LIMN_EDGE_TYPE_MAX =    7
LIMN_SPACE_MAX =  4
LIMN_PRIMITIVE_MAX =       7
LIMN_POLY_DATA_INFO_MAX =  3
LIMN_QN_MAX =     16
LIMN_SPLINE_TYPE_MAX =    5
LIMN_SPLINE_INFO_MAX =   6
LIMN_CAMERA_PATH_TRACK_MAX = 3
MITE = miteBiffKey
mite_nt = nrrdTypeFloat
mite_at = airTypeFloat
limnVTOQN = limnVtoQN_f
MITE_T_DOUBLE = 0
mite_nt = nrrdTypeDouble
mite_at = airTypeDouble
limnVTOQN = limnVtoQN_d
MITE_T_DOUBLE = 1
MITE_RANGE_NUM =      9
MITE_STAGE_OP_MAX =  4
MITE_VAL_ITEM_MAX =  19
NRRD = nrrdBiffKey
NRRD_DIM_MAX = 16            
NRRD_SPACE_DIM_MAX = 8
NRRD_EXT_NRRD =   ".nrrd"
NRRD_EXT_NHDR =   ".nhdr"
NRRD_EXT_PGM =    ".pgm"
NRRD_EXT_PPM =    ".ppm"
NRRD_EXT_PNG =    ".png"
NRRD_EXT_VTK =    ".vtk"
NRRD_EXT_TEXT =   ".txt"
NRRD_EXT_EPS =    ".eps"
NRRD_KERNEL_PARMS_NUM = 8
NRRD_COMMENT_CHAR = '#'
NRRD_FILENAME_INCR = 32
NRRD_COMMENT_INCR = 16
NRRD_KEYVALUE_INCR = 32
NRRD_LIST_FLAG = "LIST"
NRRD_PNM_COMMENT = "# NRRD>"
NRRD_PNG_FIELD_KEY = "NRRD"
NRRD_PNG_COMMENT_KEY = "NRRD#"
NRRD_UNKNOWN =  "???"
NRRD_NONE = "none"
NRRD_FORMAT_TYPE_MAX =    6
NRRD_BOUNDARY_MAX =  4
NRRD_TYPE_MAX =       11
NRRD_TYPE_SIZE_MAX =   8    
NRRD_TYPE_BIGGEST = ctypes.c_double
NRRD_ENCODING_TYPE_MAX = 5
NRRD_ZLIB_STRATEGY_MAX =  3
NRRD_CENTER_MAX =         2
NRRD_KIND_MAX =           31
NRRD_AXIS_INFO_SIZE_BIT =      (1<< 1)
NRRD_AXIS_INFO_SPACING_BIT =   (1<< 2)
NRRD_AXIS_INFO_THICKNESS_BIT = (1<< 3)
NRRD_AXIS_INFO_MIN_BIT =       (1<< 4) 
NRRD_AXIS_INFO_MAX_BIT =       (1<< 5)
NRRD_AXIS_INFO_SPACEDIRECTION_BIT = (1<< 6)
NRRD_AXIS_INFO_CENTER_BIT =    (1<< 7)
NRRD_AXIS_INFO_KIND_BIT =      (1<< 8)
NRRD_AXIS_INFO_LABEL_BIT =     (1<< 9)
NRRD_AXIS_INFO_UNITS_BIT =     (1<<10)
NRRD_AXIS_INFO_MAX =               10
NRRD_AXIS_INFO_NONE = 0
NRRD_BASIC_INFO_DATA_BIT =             (1<< 1)
NRRD_BASIC_INFO_TYPE_BIT =             (1<< 2)
NRRD_BASIC_INFO_BLOCKSIZE_BIT =        (1<< 3)
NRRD_BASIC_INFO_DIMENSION_BIT =        (1<< 4)
NRRD_BASIC_INFO_CONTENT_BIT =          (1<< 5)
NRRD_BASIC_INFO_SAMPLEUNITS_BIT =      (1<< 6)
NRRD_BASIC_INFO_SPACE_BIT =            (1<< 7)
NRRD_BASIC_INFO_SPACEDIMENSION_BIT =   (1<< 8)
NRRD_BASIC_INFO_SPACEUNITS_BIT =       (1<< 9)
NRRD_BASIC_INFO_SPACEORIGIN_BIT =      (1<<10)
NRRD_BASIC_INFO_MEASUREMENTFRAME_BIT = (1<<11)
NRRD_BASIC_INFO_OLDMIN_BIT =           (1<<12)
NRRD_BASIC_INFO_OLDMAX_BIT =           (1<<13)
NRRD_BASIC_INFO_COMMENTS_BIT =         (1<<14)
NRRD_BASIC_INFO_KEYVALUEPAIRS_BIT =    (1<<15)
NRRD_BASIC_INFO_MAX =                      15
NRRD_BASIC_INFO_NONE = 0
NRRD_ENDIAN_MAX = 2
NRRD_FIELD_MAX =            32
NRRD_HAS_NON_EXIST_MAX = 3
NRRD_SPACE_MAX =                   12
NRRD_MEASURE_MAX =        26
NRRD_BLIND_8BIT_RANGE_MAX = 3
NRRD_UNARY_OP_MAX =   28
NRRD_BINARY_OP_MAX =   20
NRRD_TERNARY_OP_MAX = 10
# SEEK = seekBiffKey
# SEEK_TYPE_MAX =        7
# TEN = tenBiffKey
# TEN_ANISO_MAX =  29
# TEN_INTERP_TYPE_MAX =        10
# TEN_GLYPH_TYPE_MAX =   4
# TEN_GAGE_ITEM_MAX =     146
# TEN_DWI_GAGE_ITEM_MAX = 35
# TEN_ESTIMATE_1_METHOD_MAX = 4
# TEN_ESTIMATE_2_METHOD_MAX = 2
# TEN_FIBER_TYPE_MAX =   6
# TEN_DWI_FIBER_TYPE_MAX =    3
# TEN_FIBER_INTG_MAX =  3
# TEN_FIBER_STOP_MAX =    10
# TEN_FIBER_NUM_STEPS_MAX = 10240
# TEN_FIBER_PARM_MAX =        4
# TEN_TRIPLE_TYPE_MAX =   9
# TEN_DWI_GAGE_KIND_NAME = "dwi"
# UNRRDU = unrrduBiffKey
# UNRRDU_COLUMNS = 78  

##############################################################################


airEndian = ctypes.POINTER(airEnum).in_dll(libteem, 'airEndian')
airThreadCapable = ctypes.c_int.in_dll(libteem, 'airThreadCapable')
airThreadNoopWarning = ctypes.c_int.in_dll(libteem, 'airThreadNoopWarning')
airFloatQNaN = ctypes.c_float.in_dll(libteem, 'airFloatQNaN')
airFloatSNaN = ctypes.c_float.in_dll(libteem, 'airFloatSNaN')
airFloatPosInf = ctypes.c_float.in_dll(libteem, 'airFloatPosInf')
airFloatNegInf = ctypes.c_float.in_dll(libteem, 'airFloatNegInf')
airBool = ctypes.POINTER(airEnum).in_dll(libteem, 'airBool')
airTeemVersion = ctypes.POINTER(ctypes.c_char).in_dll(libteem, 'airTeemVersion')
airTeemReleaseDate = ctypes.POINTER(ctypes.c_char).in_dll(libteem, 'airTeemReleaseDate')
airMyFmt_size_t = ctypes.POINTER(ctypes.c_char).in_dll(libteem, 'airMyFmt_size_t')
airTypeStr = ((ctypes.c_char * (AIR_TYPE_MAX+1)) * AIR_STRLEN_SMALL).in_dll(libteem, 'airTypeStr')
airTypeSize = (ctypes.c_size_t * (AIR_TYPE_MAX+1)).in_dll(libteem, 'airTypeSize')
airDisableDio = ctypes.c_int.in_dll(libteem, 'airMyDio')

##############################################################################
# deal with teem functions that return freshly allocated strings

from ctypes.util import find_library
libc = ctypes.cdll.LoadLibrary(find_library('c'))

def string_nixer(result, *args):
    if result:
        s = ctypes.string_at(result)
        libc.free(result)
        return s
    else:
        return ''

def string_nixerify(f):
    f.errcheck = string_nixer
    f.restype = ctypes.c_void_p

for f in [biffGetDone, biffGet, nrrdKeyValueGet, nrrdIterContent]:
    string_nixerify(f)

##############################################################################
# Biff-related

class BiffException(Exception):
    pass

def make_biff_checker(library_identifier):
    def biff_checker(result, *args):
        if result <> 0:
            msg = biffGetDone(library_identifier)
            raise BiffException(msg)
        return result
    return biff_checker

nrrd_biff_checker = make_biff_checker(NRRD)
gage_biff_checker = make_biff_checker(GAGE)
limn_biff_checker = make_biff_checker(LIMN)
mite_biff_checker = make_biff_checker(MITE)

def _guess_biff_checker(fname):
    if fname.startswith('nrrd'):
        return nrrd_biff_checker
    elif fname.startswith('gage'):
        return gage_biff_checker
    elif fname.startswith('limn'):
        return limn_biff_checker
    elif fname.startswith('mite'):
        return mite_biff_checker
    else:
        return None

__no_biff = set([
    'airIsNaN',
    'airIsInf_f',
    'airIsInf_d',
    'gageProbe',
    'gageStackProbe',
    'gageProbeSpace',
    'gageStackProbeSpace',
    'gageKindTotalAnswerLength',
    'gageKindAnswerLength',
    'gageKindAnswerOffset',
    'gagePerVolumeIsAttached',
    'nrrdKindIsDomain'])

__l = locals().items()
ftype = type(nrrdNew)
for f_name, f_value in __l:
    if type(f_value) == ftype:
        if (f_value.restype == ctypes.c_int and
            f_name not in __no_biff):
            v = _guess_biff_checker(f_name)
            if v:
                f_value.errcheck = v

##############################################################################
# Give teem FILE pointers

def from_file(f):
    return ctypes.cast(ctypes.pythonapi.PyFile_AsFile(ctypes.py_object(f)),
                       ctypes.POINTER(FILE))
